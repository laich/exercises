public class Solution {

/**

    我的O(n)实现思路，办法比较笨，属于死磕。
    例如4、3、2、1、10、9、8，设初始偏移量offset在4的位置0时，当i介于4跟10间，每i++那么总量total增加i距离的差(i-offset)个糖果，
    继续右移，发现ratings[i]>ratings[i-1]即当10为初始偏移量时，最后一位权重为8的孩童，在返回处额外处理。
    麻烦点是1、2、3、5、4、3、，4的位置应该补2为最小值即使应该分配1、2、3、5、2、1为正确答案。
**/
   public static int candy(int[] ratings) {
	        if(ratings.length<=1)
	            return 1;
	        int offsetStart=1;
	        int offsetEnd=offsetStart+1;
	        int total=0;
	        int priorAssigned=1;
	        int lastOneAmount=1;
	        int gap=0;
	        boolean isEqualsBefore=false;
	        if(ratings[1]<ratings[0])
	            total=1;
	        for(int i=1;i<ratings.length;i++){
	            if(ratings[i]<ratings[i-1]){
	                if(1==offsetEnd-offsetStart&&!isEqualsBefore){
	                    total+=priorAssigned;
	                    offsetEnd++;
	                    gap=priorAssigned-1;
	                }else if(isEqualsBefore){
	                    total++;
	                    total+=(offsetEnd++-offsetStart);
	                }
	                else{
	                    if(gap<offsetEnd-offsetStart)
	                    	total++;
	                    total+=(offsetEnd++-offsetStart);
	                }
	                priorAssigned=1;
	                lastOneAmount=1;
	                isEqualsBefore=false;
	            }else if(ratings[i]==ratings[i-1]){
	                if(isEqualsBefore){
	                    total++;                       
	                }
	                else
	                    total+=priorAssigned; 
	                priorAssigned=1;
	                lastOneAmount=1;
	                offsetStart=offsetEnd++;
	                isEqualsBefore=true;
	                gap=0;
	            }else{
	                gap=0;
	                total+=priorAssigned;
	                offsetStart=offsetEnd++;
	                priorAssigned++;
	                lastOneAmount=priorAssigned;
	                isEqualsBefore=false;
	            }
	        }
	       
	            return total+lastOneAmount;
	    }
}
